// üîß –ó–∞–≤–¥–∞–Ω–Ω—è:
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π call, —â–æ–± user1 —Å–∫–∞–∑–∞–≤:
// –ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –ú–∞—Ä—ñ—è!

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π apply, —â–æ–± user2 —Å–∫–∞–∑–∞–≤:
// –î–æ–±—Ä–∏–π –¥–µ–Ω—å, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –Ü–≤–∞–Ω.

// –°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é bind, —è–∫–∞ –∑–∞–≤–∂–¥–∏ –≤—ñ—Ç–∞—î—Ç—å—Å—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ user1, –∑—ñ —Å–ª–æ–≤–æ–º "–•–∞–π".
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —ó—ó, —â–æ–± –≤–∏–≤–µ—Å—Ç–∏:
// –•–∞–π, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –ú–∞—Ä—ñ—è!!!



// const user1 = {
//     name: "–ú–∞—Ä—ñ—è"
//   };
  
//   const user2 = {
//     name: "–Ü–≤–∞–Ω"
//   };
  
//   function sayHello(greeting, punctuation) {
//     console.log(`${greeting}, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}${punctuation}`);
//   }
  

// sayHello.call(user1, '–ü—Ä–∏–≤—ñ—Ç', '!');

// sayHello.apply(user2, ['–î–æ–±—Ä–∏–π –¥–µ–Ω—å', '.']);

// const lastGreeting = sayHello.bind(user1, '–•–∞–π', '!!!');
// lastGreeting();

// class User {
//     constructor(name, email) {
//       // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –µ–∫–∑–µ–º–ø–ª—è—Ä–∞
//       this.name = name;
//       this.email = email;
//     }
//   }
  
//   const mango = new User("Mango", "mango@mail.com");
//   console.log(mango); // { name: 'Mango', email: 'mango@mail.com' }
  
//   const poly = new User("Poly", "poly@mail.com");
//   console.log(poly); // { name: 'Poly', email: 'poly@mail.com' }
  